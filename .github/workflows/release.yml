name: Releases

on: 
  push:
    tags:
    - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  WORKSPACE_DIR: ./rust_ws

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ github.ref_name }} --generate-notes
  build_and_upload:
    needs: create_release
    strategy:
      matrix:
        platform:
          # Linux
          - os: ubuntu-latest
            cache_target: x86_64-unknown-linux-musl
            cmd: | 
              rustup target add x86_64-unknown-linux-musl
              cargo build --release --manifest-path ./rust_ws/Cargo.toml --target x86_64-unknown-linux-musl
              mkdir __out
              cp ./rust_ws/target/x86_64-unknown-linux-musl/release/gha_test ./__out/gha_test-linux-x86_64
            outputs: |
              "./__out/gha_test-linux-x86_64"

          # Mac
          - os: macos-latest
            cache_target: aarch64-apple-darwin
            cmd: |
              rustup target add aarch64-apple-darwin
              rustup target add x86_64-apple-darwin
              cargo build --release --manifest-path ./rust_ws/Cargo.toml --target aarch64-apple-darwin
              cargo build --release --manifest-path ./rust_ws/Cargo.toml --target x86_64-apple-darwin
              mkdir __out
              lipo -create ./rust_ws/target/aarch64-apple-darwin/release/gha_test ./rust_ws/target/x86_64-apple-darwin/release/gha_test -output ./__out/gha_test-mac-universal
              lipo -create ./rust_ws/target/aarch64-apple-darwin/release/libgha_test_ffi.dylib ./rust_ws/target/x86_64-apple-darwin/release/libgha_test_ffi.dylib -output ./__out/libgha_test_ffi-mac-universal.dylib
            outputs: |
              "./__out/gha_test-mac-universal"
              "./__out/libgha_test_ffi-mac-universal.dylib"

          # Windows
          - os: windows-latest
            cache_target: x86_64-pc-windows-msvc
            cmd: |
              rustup target add x86_64-pc-windows-msvc
              cargo build --release --manifest-path ./rust_ws/Cargo.toml --target x86_64-pc-windows-msvc
              mkdir __out
              cp ./rust_ws/target/x86_64-pc-windows-msvc/release/gha_test.exe ./__out/gha_test-win-x86_64.exe
              cp ./rust_ws/target/x86_64-pc-windows-msvc/release/gha_test_ffi.dll ./__out/gha_test_ffi-win-x86_64.dll
            outputs: |
              "./__out/gha_test-win-x86_64.exe"
              "./__out/gha_test_ffi-win-x86_64.dll"

          # Android
          - os: ubuntu-latest
            cache_target: aarch64-linux-android
            cmd: | 
              cargo install cross --git https://github.com/cross-rs/cross
              cross build --release --manifest-path ./rust_ws/Cargo.toml --target aarch64-linux-android
              mkdir __out
              cp ./rust_ws/target/aarch64-linux-android/release/gha_test_ffi.a ./__out/gha_test_ffi-android-arm64.a
            outputs: |
              "./__out/gha_test_ffi-android-arm64.a"

          # iOS
          - os: macos-latest
            cache_target: aarch64-apple-ios
            cmd: | 
              rustup target add aarch64-apple-ios
              cargo build --release --manifest-path ./rust_ws/Cargo.toml --target aarch64-apple-ios
              mkdir __out
              cp ./rust_ws/target/aarch64-apple-ios/release/gha_test_ffi.a ./__out/gha_test_ffi-ios-arm64.a
            outputs: |
              "./__out/gha_test_ffi-ios-arm64.a"

    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/cache_cargo
      with:
        target: ${{ matrix.platform.cache_target }}
        workspace: ${{ env.WORKSPACE_DIR }}
    - name: Build (Release)
      shell: bash
      run: |
        ${{ matrix.platform.cmd }}
    - name: Upload artifact
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        OUTPUTS=(${{ matrix.platform.outputs }})
        for item in "${OUTPUTS[@]}"; do
          gh release upload ${{ github.ref_name }} ${item}
        done
